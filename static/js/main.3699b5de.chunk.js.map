{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","genre","index","MovieGenre","key","text","maxLine","ellipsis","trimRight","basedOn","src","proptype","PropTypes","string","isRequired","array","App","state","__renderMovies","movies","movie","title_english","medium_cover_image","id","__getMovies","a","__callApi","setState","fetch","then","reponse","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+VAsCA,SAASA,EAAT,GAA+C,IAA/BC,EAA8B,EAA9BA,MAAMC,EAAwB,EAAxBA,OAAOC,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SAChC,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAKN,KAEtC,yBAAKI,UAAU,iBACX,4BAAKJ,GACL,yBAAKI,UAAU,iBACVF,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,QAEjE,yBAAKL,UAAU,mBACf,kBAAC,IAAD,CACIQ,KAAMT,EACNU,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAU5B,SAASX,EAAT,GAAoC,IAAdJ,EAAa,EAAbA,OAAQK,EAAK,EAALA,IAC1B,OACI,yBAAKW,IAAKhB,EAAQK,IAAKA,EAAKN,MAAOM,EAAKF,UAAU,kBAI1D,SAASM,EAAT,GAA6B,IAARF,EAAO,EAAPA,MACjB,OACI,0BAAMJ,UAAU,gBAAgBI,GAKxCT,EAAMmB,SAAW,CACblB,MAAOmB,IAAUC,OAAOC,WACxBpB,OAAQkB,IAAUC,OAAOC,WACzBnB,OAAQiB,IAAUG,MAAMD,WACxBlB,SAAUgB,IAAUC,OAAOC,YAG/BhB,EAAYa,SAAW,CACnBjB,OAAQkB,IAAUC,OAAOC,WACzBf,IAAKa,IAAUC,OAAOC,YAG1BX,EAAWQ,SAAW,CAClBV,MAAOW,IAAUC,OAAOC,YAIbtB,QCtCAwB,E,4MAnDbC,MAAQ,G,EAYVC,eAAiB,WASf,OARe,EAAKD,MAAME,OAAOnB,KAAI,SAACoB,EAAOlB,GAC3C,OAAO,kBAAC,EAAD,CACNT,MAAO2B,EAAMC,cACb3B,OAAQ0B,EAAME,mBACdlB,IAAKgB,EAAMG,GACX5B,OAAQyB,EAAMzB,OACdC,SAAUwB,EAAMxB,e,EAMrB4B,Y,sBAAc,4BAAAC,EAAA,sEACS,EAAKC,YADd,OACNP,EADM,OAGZ,EAAKQ,SAAS,CACZR,WAJU,2C,EAQdO,UAAY,WAEV,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,UACvBc,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,kEAhC1BG,KAAKb,gB,+BAmCK,IACAL,EAAUkB,KAAKpB,MAAfE,OACR,OACE,yBAAKtB,UAAWsB,EAAS,MAAO,gBAC7BA,EAASkB,KAAKnB,iBAAmB,e,GA/CxBoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.3699b5de.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n/* 클래스 컴포넌트\r\nclass Movie extends Component{\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <MoviePoster poster={this.props.poster}/> \r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <img src={this.props.poster}/>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\n/*함수 컴포넌트*/\r\nfunction Movie({title,poster,genres,synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie_Columns\"> \r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n/*genre는 여러개일수있기때문에 array로 맵핑 해준다. */\r\n\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n/*proptype*/\r\nMovie.proptype = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.proptype = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.proptype = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n  state = {}\r\n\r\ncomponentDidMount(){\r\n  // 외부 라이브러리 연동: D3, masonry, etc\r\n  // 컴포넌트에서 필요한 데이터 요청: Ajax, GraphQL, etc\r\n  // DOM 에 관련된 작업: 스크롤 설정, 크기 읽어오기 등\r\n  this.__getMovies();\r\n\r\n}\r\n\r\n// ...this.state.movies 이전 영화리스트는 그대로 남기고 새롭게 추가\r\n/*Loading States*/\r\n__renderMovies = () => {\r\n  const movies = this.state.movies.map((movie, index) => {\r\n    return <Movie\r\n     title={movie.title_english}\r\n     poster={movie.medium_cover_image}\r\n     key={movie.id}\r\n     genres={movie.genres}\r\n     synopsis={movie.synopsis} />\r\n  })\r\n  return movies\r\n}\r\n\r\n//비동기화 async 순서에상관없이 작업진행\r\n__getMovies = async () => {\r\n  const movies = await this.__callApi()\r\n  //call api작업완료후에! (성공여부x) 리턴값을 movies에 set한다\r\n  this.setState({\r\n    movies\r\n  })\r\n}\r\n\r\n__callApi = () => {\r\n  //fetch를 이용해 url 불러오기 AJAX(url을 자바스크립트로 비동기화방법으로 불러온다.)\r\n  return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\r\n  .then(reponse => reponse.json())\r\n  .then(json => json.data.movies)\r\n  .catch(err => console.log(err))\r\n}\r\n\r\n  render() {\r\n    const { movies } =this.state;\r\n    return (\r\n      <div className={movies ? \"App\": \"App--loading\"}>\r\n        {movies ? this.__renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}